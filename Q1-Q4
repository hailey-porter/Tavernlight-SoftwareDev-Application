Q1 - Fix or improve the implementation of the below methods

local function releaseStorage(playerId)
  --Get player by id value to ensure the function delays work as intended on the correct player
  local player = Player(playerId);

  --Only set storage value if player exists
  if player then                                                    
    player:setStorageValue(1000, -1);
  end
end

function onLogout(playerId)
  if player:getStorageValue(1000) == 1 then
    addEvent(releaseStorage, 1000, player:getId());
  end
  return true
end

Q2 - Fix or improve the implementation of the below method

function printSmallGuildNames(memberCount)
  local selectGuildQuery = "SELECT name FROM guilds WHERE max_members < %d;"
 
  -- Do we need to store this query? If not, remove the next line
  local resultId = db.storeQuery(string.format(selectGuildQuery, memberCount));
  
  local guildName = resultId.getString("name");
  print(guildName);
end

Q3 - Fix or improve the name and the implementation of the below method

-- update function name to remove_player_from_party
function remove_player_from_party(playerId, membername)
  player = Player(playerId);
  local party = player:getParty();
  
  for k,v in pairs(party:getMembers()) do
    -- update Player(membername) to membername
    if v == membername then
    party:removeMember(membername);
  end
  end
end

Q4 - Assume all method calls work fine. Fix the memory leak issue in below method

void Game::addItemToPlayer(const std::string& recipient, uint16_t itemId)
{
  Player* player = g_game.getPlayerByName(recipient);
  
  if (!player) {
    player = new Player(nullptr);
    if (!IOLoginData::loadPlayerByName(player, recipient)) {
        -- make sure memory allocated for player is released if they don't exist
        delete player;
      return;
    }
  }
  
  Item* item = Item::CreateItem(itemId);
  
  if (!item) {
    -- make sure memory allocated for player is released if they don't exist
    if(!g_game.getPlayerByName(recipient)){
      delete player;
    -- make sure memory allocated for new item is released if CreateItem failed
    delete item;
    return;
  }
  
  g_game.internalAddItem(player->getInbox(), item, INDEX_WHEREEVER, FLAG_NOLIMIT);
  
  if (player->isOffline()) {
    IOLoginData::savePlayer(player);
  }
 
 -- make sure memory allocated for player is released if they don't exist
 if(!g_game.getPlayerByName(recipient)){
      delete player;
  }
}
